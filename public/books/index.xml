<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Books on 學習筆記</title>
    <link>http://localhost:1313/books/</link>
    <description>Recent content in Books on 學習筆記</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/books/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/books/chapter1/js_install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/books/chapter1/js_install/</guid>
      <description>&lt;h3 id=&#34;js-入門環境安裝&#34;&gt;JS 入門環境安裝&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;安裝 VScode-&amp;gt;安裝插件-&amp;gt;延伸模組(需要注意下載人數，避免下錯)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;material icon theme(小圖示)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;前端主要使用&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HTML&lt;/li&gt;&#xA;&lt;li&gt;CSS&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;JAVAScript(JS)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;進到主控台就能寫 JAVAScript&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;簡單測試 alret 指令跳出警告&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;創建.html 檔案，進入檔案輸入!會產生 HTML 基本檔案&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安裝插件-&amp;gt;live server，用來直接模擬 html 執行結果&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;&amp;lt;script src = &amp;quot;檔案名稱.js&amp;quot;&amp;gt; &amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在檔案名稱.js 輸入 console.log(&amp;ldquo;123&amp;rdquo;)在主控台印出 123&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安裝 node.js-&amp;gt;在終端機輸入 node-&amp;gt;可以仿照控制台狀態-&amp;gt;直接輸入&lt;strong&gt;node 檔案名稱.js&lt;/strong&gt;就可以跑出結果&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;執行 JS = 執行環境(Runtime)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;瀏覽器&lt;/li&gt;&#xA;&lt;li&gt;node(非瀏覽器族群)&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/books/chapter2/data_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/books/chapter2/data_type/</guid>
      <description>&lt;h3 id=&#34;資料型別&#34;&gt;資料型別:&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;基本型別（Primitive Types）如下表&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;型別名稱&lt;/th&gt;&#xA;          &lt;th&gt;解釋&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;number&lt;/td&gt;&#xA;          &lt;td&gt;整數型(Integers)、浮點型(Floats)、雙精度型(Doubles) 或 大數型(Bignums)，目前 js 使用的是雙精度型標示所有數字，是 64 位元的二進制編碼器&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;標示文字的字元序列，集合就是字串&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;boolean&lt;/td&gt;&#xA;          &lt;td&gt;布林值只提供 true of false 兩種回傳值與機械語言相似，只有 1 與 0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;null&lt;/td&gt;&#xA;          &lt;td&gt;代表不存在或是無效的物件、位址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;BigInt&lt;/td&gt;&#xA;          &lt;td&gt;可以表示任意精度格式的整數，代表的是可以表示的最大數字，例如單精度型就是 2 的 32 次方，雙精度型則是 64 次方，目前 js 使用的是雙精度型&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;symbol&lt;/td&gt;&#xA;          &lt;td&gt;一個對象值的標示符號，回傳的 symbol 的都有自己唯一的回傳值，即使看起來一樣，進行===仍會是 false&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;object&lt;/td&gt;&#xA;          &lt;td&gt;包含資料與處理資料指令的資料結構，例如陣列使用 typeof 會被當作 object&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;strong&gt;基本型別的關鍵特徵&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不可變性：一旦基本型別的變數被賦值，就無法直接改變該值。例如，對字串進行操作時，會創建一個新的字串，而不會直接修改原字串。基本型別的值始終是固定的。&lt;/li&gt;&#xA;&lt;li&gt;按值傳遞：當基本型別的變數被賦值給另一個變數時，實際上是將其值的副本傳遞過去。因此，修改副本不會影響原始變數&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//在這裡，a 和 b 擁有不同的數值，改變 b 不會影響 a。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;變數宣告&#34;&gt;變數宣告&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;變數可以使用 var、let、const 進行宣告&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;var&lt;/strong&gt;:ES6 之前只有此項宣告，容易產生全域污染，可重複宣告，只有 function scope&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;let&lt;/strong&gt;:ES6 新增的宣告，由於 block scope 不會產生全域污染，不可重複宣告，具有 block scope 特性，let 的值可以重新賦值&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;const&lt;/strong&gt;:ES6 新增的宣告，由於 block scope 不會產生全域污染，不可重複宣告，具有 block scope 特性，const 的值不可以重新賦值，但是陣列內容可以被改變&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/scope%E5%9C%96.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/books/chapter3/js_two_step_flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/books/chapter3/js_two_step_flow/</guid>
      <description>&lt;h3 id=&#34;javascript-執行兩個階段&#34;&gt;Javascript 執行兩個階段&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;variable hoisting(變數提升):主要因為 JS 執行兩階段造成&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;建立期&lt;/strong&gt;：1A 註冊名稱(identifier)先拿名字+進行初始化先 undefined 1B&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;執行期&lt;/strong&gt;：執行函數+給值&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;變數提升&lt;/strong&gt;：變數與函數的宣告移動到作用域的最頂端做處理，行為解釋可以當成讓變數被實際宣告前就能使用，但是在 var 與 let/const 的狀態不一樣&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;TDZ(Temporal Dead Zone)&lt;/strong&gt;:暫時死區，let/const 在建立期先宣告變數，但是如果在宣告之前就進行使用，會直接給 referanceError，意即，宣告在需要作用的區域之前，否則提早進行使用會進入暫時死區&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用 var 進行宣告，console.log 在第一階段可以被讀到 undefined，等第二階段賦值直接產出結果&#xA;&lt;img src=&#34;http://localhost:1313/images/chap3/pic1.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;http://localhost:1313/images/chap3/pic2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用 let/const 進行宣告，宣告完成前使用則進入 TDZ，因此會有 ReferenceError&#xA;&lt;img src=&#34;http://localhost:1313/images/chap3/pic3.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;http://localhost:1313/images/chap3/pic4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用 let 可以重新賦值，使用 const 進行宣告，不能重新賦值，但是陣列元素可以被改變&#xA;let 部分：&#xA;&lt;img src=&#34;http://localhost:1313/images/chap3/pic5.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;http://localhost:1313/images/chap3/pic6.png&#34; alt=&#34;&#34;&gt;&#xA;const 部分：&#xA;&lt;img src=&#34;http://localhost:1313/images/chap3/pic7.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;http://localhost:1313/images/chap3/pic8.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;http://localhost:1313/images/chap3/pic9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
